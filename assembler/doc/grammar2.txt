ANC216.2 STANDARD

PreProcessor ::=
    UseAs
    | Import
    | If
    | "\n" PreProcessor
    | ""
    ;

UseAs ::= 
    "use" id ("as" any)?
    ;

Import ::=
    "import" (id | string)
    ;

If ::= 
    "if" ("!" | "not") ? id "then" "\n" Prog ("elif" ("!" | "not") id "then" "\n" Prog)* "endif" End
    ;

---------------------------------------------------------

Prog ::= 
    Section Prog
    | StructDef Prog
    | Label Prog
    | Instruction Prog
    | Declaration Prog
    | ExpList Prog
    | Namespace Prog
    | Org Prog
    | "\n" Prog
    | ""
    ;

Namespace ::=
    "namespace" id "\n" Prog "end"

Task ::=
    "task" id Args "\n" Prog "end"

Section ::=
    "section" "." id End
    ;

Org ::=
    "org" Expr End

StructDef ::=
    "structure" id ":" ("\n" ? StructEl ",")* "\n" ? StructEl 
    ;

StructEl ::=
    id ":" ("word" | "byte")
    ;

Label ::=
    ("global" | "local")? id ":" 
    ;

Instruction ::=
    instr Addrr End
    ;

Addrr ::=
    ""              -- implied
    | Exp           -- immediate
    | register      -- register access
    | Mem           -- memory access
    | ImmMem        -- immediate to memory
    | RegMem        -- register to memory, register to register, memory to register

ImmMem ::=                                      
    "&" "bp" ("+" | "-") Exp "," Exp            -- relative to base pointer
    | "&" "bp" ("+" | "-") lowRegister "," Exp  -- relative to base pointer with register offset
    | id "[" Exp "]" "," Exp                    -- array access
    | id "[" lowRegister "]" "," Exp            -- array access indexed
    | "&" Exp "," Exp                           -- absolute reference
    | "&" Exp ("+" | "-") lowRegister "," Exp   -- absolute reference indexed
    ;

Mem ::=
    "&" Exp                                     -- absolute
    | "&" Exp ("+" | "-") lowRegister           -- absolute indexed
    | "[" Exp "]"                               -- indirect
    | "[" Exp "]" ("+" | "-") lowRegister       -- indirect indexed
    | "*" Exp                                   -- relative to PC
    | "&" "bp" ("+" | "-") Exp                  -- relative to base pointer
    | "&" "bp" ("+" | "-") lowRegister          -- relative to base pointer with register offset
    ;

RegMem ::=
    register "," (register | "&" Exp | "&" "bp" ("+" | "-") Exp | Exp | "*" Exp | id "[" Exp "]")    -- memory to register
    | ("&" Exp | "&" "bp" ("+" | "-") Exp | "*" Exp | id "[" Exp "]") "," register                   -- register to memory
    ;

Declaration ::=
    "var" id ":" "[" ? ("byte" | "word" | id) "]" ? "\n" ("=" Exp)? End
    ;

ExpList ::=
    Exp ("," ExpList)* End
    | "reserve" Exp ("," ExpList)* End
    | string ("," ExpList)* End
    | ""
    ;

Exp ::= 
    Mul ("+" Mul)*
    | Mul ("-" Mul)*
    ;

Mul ::= 
    Atom ("*" Atom)*
    | Atom ("/" Atom)*
    ;

Atom ::=
    value
    | id
    | id "." id
    | "(" Exp ")"
    | "sizeof" id
    | "byte" Exp
    | "word" Exp
    | "$"
    | + Atom
    | - Atom
    | 'char'
    | "offset" id
    ;

End ::= "\n" | EOF;